import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Crypto from 'expo-crypto';
import SessionStorageService from './SessionStorageService';
// C√°c key l∆∞u tr·ªØ d·ªØ li·ªáu x√°c th·ª±c
const STORAGE_KEYS = {
  AUTH_TOKEN: 'authToken',
  USER_DATA: 'userData',
  USERS_LIST: 'usersList'
};

// L·ªõp qu·∫£n l√Ω m√£ h√≥a m·∫≠t kh·∫©u
class PasswordManager {
  /**
   * T·∫°o salt ng·∫´u nhi√™n
   */
  static generateSalt() {
    // T·∫°o salt ng·∫´u nhi√™n 32 k√Ω t·ª± hex
    const randomBytes = Math.random().toString(36).substring(2, 15) + 
                       Math.random().toString(36).substring(2, 15) +
                       Date.now().toString(36);
    return randomBytes.substring(0, 32);
  }

  /**
   * M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng SHA-256 v·ªõi salt
   */
  static async hashPassword(password, salt = null) {
    if (!salt) {
      salt = this.generateSalt();
    }
    
    // K·∫øt h·ª£p password v√† salt
    const passwordSalt = password + salt;
    
    // M√£ h√≥a b·∫±ng SHA-256 s·ª≠ d·ª•ng expo-crypto
    const hash = await Crypto.digestStringAsync(
      Crypto.CryptoDigestAlgorithm.SHA256,
      passwordSalt,
      { encoding: Crypto.CryptoEncoding.HEX }
    );
    
    return {
      hash: hash,
      salt: salt
    };
  }

  /**
   * X√°c minh m·∫≠t kh·∫©u
   */
  static async verifyPassword(password, storedHash, storedSalt) {
    const newHashData = await this.hashPassword(password, storedSalt);
    return newHashData.hash === storedHash;
  }
}

class AuthService {
  static isAuthenticated = false;
  static currentUser = null;
  
  // X√≥a to√†n b·ªô d·ªØ li·ªáu trong AsyncStorage
  static async clearAllData() {
    try {
      await AsyncStorage.clear();
      console.log('ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu trong AsyncStorage');
      return true;
    } catch (error) {
      console.error('L·ªói khi x√≥a d·ªØ li·ªáu:', error);
      return false;
    }
  }
  
  // Kh·ªüi t·∫°o ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  static async initialize() {
    try {
      const token = await AsyncStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);
      const userData = await AsyncStorage.getItem(STORAGE_KEYS.USER_DATA);
      
      if (token && userData) {
        this.isAuthenticated = true;
        this.currentUser = JSON.parse(userData);
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('L·ªói khi kh·ªüi t·∫°o AuthService:', error);
      return false;
    }
  }
  
  // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  static async getAllUsers() {
    try {
      const usersString = await AsyncStorage.getItem(STORAGE_KEYS.USERS_LIST);
      if (!usersString) {
        return [];
      }
      return JSON.parse(usersString);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:', error);
      return [];
    }
  }
  
  // L∆∞u danh s√°ch ng∆∞·ªùi d√πng
  static async saveAllUsers(users) {
    try {
      await AsyncStorage.setItem(STORAGE_KEYS.USERS_LIST, JSON.stringify(users));
      return true;
    } catch (error) {
      console.error('L·ªói khi l∆∞u danh s√°ch ng∆∞·ªùi d√πng:', error);
      return false;
    }
  }
  
  // T√¨m ng∆∞·ªùi d√πng theo email
  static async findUserByEmail(email) {
    const users = await this.getAllUsers();
    return users.find(user => user.email === email);
  }
  
  // Export STORAGE_KEYS ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c file kh√°c
  static get storageKeys() {
    return STORAGE_KEYS;
  }

  // ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi v·ªõi m√£ h√≥a m·∫≠t kh·∫©u
  static async register(data) {
    try {
      console.log('üîç DEBUG: B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω v·ªõi expo-crypto');
      
      // L·∫•y danh s√°ch ng∆∞·ªùi d√πng hi·ªán t·∫°i
      const users = await this.getAllUsers();
      
      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingUser = users.find(user => user.email === data.email);
      if (existingUser) {
        throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
      }
      
      console.log('üîç DEBUG: Chu·∫©n b·ªã m√£ h√≥a m·∫≠t kh·∫©u...');
      
      // M√£ h√≥a m·∫≠t kh·∫©u (async)
      const passwordData = await PasswordManager.hashPassword(data.password);
      
      console.log('üîç DEBUG: M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a');
      
      // T·∫°o ng∆∞·ªùi d√πng m·ªõi
      const newUser = {
        id: 'user_' + Date.now().toString(),
        fullName: data.fullName,
        email: data.email,
        phone: data.phone || '',
        password_hash: passwordData.hash,
        password_salt: passwordData.salt,
        createdAt: new Date().toISOString()
      };
      
      // Th√™m v√†o danh s√°ch ng∆∞·ªùi d√πng v√† l∆∞u l·∫°i
      users.push(newUser);
      await this.saveAllUsers(users);
      
      // T·∫°o token
      const token = 'token_' + newUser.id;
      
      // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p hi·ªán t·∫°i (kh√¥ng bao g·ªìm hash v√† salt)
      const userForStorage = {
        id: newUser.id,
        fullName: newUser.fullName,
        email: newUser.email,
        phone: newUser.phone,
        createdAt: newUser.createdAt
      };
      
      await AsyncStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);
      await AsyncStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(userForStorage));
      
      this.isAuthenticated = true;
      this.currentUser = userForStorage;
      
      console.log(`‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a SHA-256 cho: ${data.email}`);
      console.log(`üì¶ Hash: ${passwordData.hash.substring(0, 20)}...`);
      console.log(`üßÇ Salt: ${passwordData.salt.substring(0, 20)}...`);
      
      return {
        success: true,
        user: userForStorage,
        token: token
      };
    } catch (error) {
      console.error('L·ªói ƒëƒÉng k√Ω:', error);
      throw error;
    }
  }

  // ƒêƒÉng nh·∫≠p v·ªõi x√°c minh m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
  static async login(email, password) {
    try {
      // QUAN TR·ªåNG: Lu√¥n cho ph√©p ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n demo
      if (email === 'demo@example.com' && password === 'password') {
        console.log('ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n demo');
        return this.loginOffline(email);
      }
      
      // Ki·ªÉm tra t·ª´ danh s√°ch ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω
      const user = await this.findUserByEmail(email);
      if (!user) {
        throw new Error('Email kh√¥ng t·ªìn t·∫°i');
      }
      
      // X√°c minh m·∫≠t kh·∫©u (async)
      const isValidPassword = await PasswordManager.verifyPassword(
        password, 
        user.password_hash, 
        user.password_salt
      );
      
      if (!isValidPassword) {
        throw new Error('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
      }
      
      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√†i kho·∫£n:', email);
      console.log('üîê M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c x√°c minh qua SHA-256');
      
      // ƒê√°nh d·∫•u l√† ƒë√£ ƒëƒÉng nh·∫≠p
      this.isAuthenticated = true;
      
      // Chu·∫©n b·ªã th√¥ng tin user (kh√¥ng bao g·ªìm hash v√† salt)
      const userForStorage = {
        id: user.id,
        fullName: user.fullName,
        email: user.email,
        phone: user.phone,
        createdAt: user.createdAt
      };
      
      this.currentUser = userForStorage;
      
      // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p hi·ªán t·∫°i
      const token = 'token_' + user.id;
      await AsyncStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);
      await AsyncStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(userForStorage));
      
      return {
        success: true,
        user: userForStorage,
        token: token
      };
    } catch (error) {
      console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
      throw error;
    }
  }
  
  // Th√™m ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p offline
  static async loginOffline(email) {
    const mockUser = {
      id: 'offline_12345',
      fullName: 'Ng∆∞·ªùi D√πng Demo',
      email: email,
      phone: '0123456789',
      createdAt: new Date().toISOString(),
    };
    
    await AsyncStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(mockUser));
    await AsyncStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, 'offline_token_12345');
    
    this.isAuthenticated = true;
    this.currentUser = mockUser;
    
    return {
      success: true,
      token: 'offline_token_12345',
      user: mockUser,
    };
  }
  
  // ƒê·ªïi m·∫≠t kh·∫©u
  static async changePassword(email, oldPassword, newPassword) {
    try {
      const user = await this.findUserByEmail(email);
      if (!user) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
      }
      
      // X√°c minh m·∫≠t kh·∫©u c≈© (async)
      const isOldPasswordValid = await PasswordManager.verifyPassword(
        oldPassword, 
        user.password_hash, 
        user.password_salt
      );
      
      if (!isOldPasswordValid) {
        throw new Error('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng');
      }
      
      // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi (async)
      const newPasswordData = await PasswordManager.hashPassword(newPassword);
      
      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong danh s√°ch users
      const users = await this.getAllUsers();
      const userIndex = users.findIndex(u => u.email === email);
      
      if (userIndex >= 0) {
        users[userIndex].password_hash = newPasswordData.hash;
        users[userIndex].password_salt = newPasswordData.salt;
        await this.saveAllUsers(users);
      }
      
      console.log('‚úÖ ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho:', email);
      
      return {
        success: true,
        message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
      };
    } catch (error) {
      console.error('L·ªói ƒë·ªïi m·∫≠t kh·∫©u:', error);
      throw error;
    }
  }
  
  // ƒêƒÉng xu·∫•t
static async logout() {
  try {
    // CH·ªà X√ìA D·ªÆ LI·ªÜU AUTH - GI·ªÆ NGUY√äN D·ªÆ LI·ªÜU USER
    await AsyncStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);
    await AsyncStorage.removeItem(STORAGE_KEYS.USER_DATA);
    
    this.isAuthenticated = false;
    this.currentUser = null;
    
    console.log('‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng - D·ªØ li·ªáu user ƒë∆∞·ª£c gi·ªØ l·∫°i');
    return true;
  } catch (error) {
    console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
    return false;
  }
}
static async clearUserData() {
  try {
    await SessionStorageService.clearCurrentUserData();
    console.log('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu user hi·ªán t·∫°i');
    return true;
  } catch (error) {
    console.error('L·ªói khi x√≥a d·ªØ li·ªáu user:', error);
    return false;
  }
}
  
  // L·∫•y token hi·ªán t·∫°i
  static async getToken() {
    try {
      return await AsyncStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);
    } catch (error) {
      console.error('L·ªói l·∫•y token:', error);
      return null;
    }
  }
  
  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  static async getUserData() {
    try {
      const userData = await AsyncStorage.getItem(STORAGE_KEYS.USER_DATA);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
      return null;
    }
  }
  
  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  static async updateUserData(userData) {
    try {
      const currentUserData = await this.getUserData();
      if (!currentUserData) {
        throw new Error('Ch∆∞a ƒëƒÉng nh·∫≠p');
      }
      
      // T·∫°o ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng ƒë√£ c·∫≠p nh·∫≠t
      const updatedUser = { ...currentUserData, ...userData };
      
      // C·∫≠p nh·∫≠t trong danh s√°ch ng∆∞·ªùi d√πng
      const users = await this.getAllUsers();
      const userIndex = users.findIndex(user => user.id === currentUserData.id);
      
      if (userIndex >= 0) {
        // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n (kh√¥ng thay ƒë·ªïi password_hash v√† password_salt)
        users[userIndex] = {
          ...users[userIndex],
          fullName: updatedUser.fullName,
          phone: updatedUser.phone
        };
        await this.saveAllUsers(users);
      }
      
      // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      await AsyncStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));
      this.currentUser = updatedUser;
      
      return {
        success: true,
        user: updatedUser
      };
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t th√¥ng tin:', error);
      throw error;
    }
  }
  
  // Ki·ªÉm tra x√°c th·ª±c
  static isLoggedIn() {
    return this.isAuthenticated;
  }
  
  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
  static getCurrentUser() {
    return this.currentUser;
  }
  
  // Demo: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  static async resetPassword(email) {
    try {
      // Ki·ªÉm tra email trong danh s√°ch ng∆∞·ªùi d√πng
      const user = await this.findUserByEmail(email);
      
      if (!user) {
        // V·∫´n tr·∫£ v·ªÅ th√†nh c√¥ng d√π kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng (ƒë·ªÉ b·∫£o m·∫≠t)
        return {
          success: true,
          message: 'ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (n·∫øu email t·ªìn t·∫°i).'
        };
      }
      
      // Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
      // Nh∆∞ng demo ch·ªâ c·∫ßn tr·∫£ v·ªÅ th√†nh c√¥ng
      
      return {
        success: true,
        message: 'ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.',
      };
    } catch (error) {
      console.error('L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
      throw error;
    }
  }
}

export default AuthService;