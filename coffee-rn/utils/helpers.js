
// H√†m ƒë·ªãnh d·∫°ng ng√†y gi·ªù
export const formatDateTime = (date) => {
    if (!date) return '';
    const d = new Date(date);
    return d.toLocaleDateString('vi-VN') + ' ' + 
           d.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
  };
  
  // H√†m t·∫°o ID duy nh·∫•t
  export const generateUniqueId = () => {
    return Date.now().toString() + Math.random().toString(36).substr(2, 5);
  };
  
  // L·∫•y m√†u d·ª±a tr√™n k·∫øt qu·∫£ qu√©t
  export const getResultColor = (result) => {
    if (!result) return '#000';
    
    if (result.error) return '#d9534f'; 
    
    if (result.predicted_label.includes("Kh√¥ng ph·∫£i l√°")) {
      return '#d9534f'; 
    }
    
    if (result.warning) {
      return '#f0ad4e'; 
    }
    
    if (result.predicted_label.includes("kho·∫ª")) {
      return '#5cb85c'; 
    }
    
    return '#d9534f'; 
  };
  
  // L·∫•y bi·ªÉu t∆∞·ª£ng d·ª±a tr√™n k·∫øt qu·∫£ qu√©t
  export const getResultIcon = (result) => {
    if (!result || result.error) return null;
    
    if (result.predicted_label.includes("Kh√¥ng ph·∫£i l√°")) {
      return "‚ùå";
    }
    
    if (result.warning) {
      return "‚ö†Ô∏è";
    }
    
    if (result.predicted_label.includes("kho·∫ª")) {
      return "‚úÖ";
    }
    
    return "ü©∫";
  };
  

export const calculateStats = (scanHistory) => {
  if (!scanHistory || scanHistory.length === 0) {
    return {
      totalScans: 0,
      healthyTrees: 0,
      diseasedTrees: 0,
      notCoffeeTrees: 0, 
      diseases: {}
    };
  }

  const totalScans = scanHistory.length;
  const healthyTrees = scanHistory.filter(scan => scan.result.includes('kho·∫ª')).length;
  const notCoffeeTrees = scanHistory.filter(scan => scan.result.includes('Kh√¥ng ph·∫£i l√°')).length; 
  const diseasedTrees = totalScans - healthyTrees - notCoffeeTrees; 

  // Th·ªëng k√™ c√°c lo·∫°i b·ªánh
  const diseases = scanHistory.reduce((acc, scan) => {
    if(!scan.result.includes('kho·∫ª') && !scan.result.includes('Kh√¥ng ph·∫£i l√°')) { 
      // L·∫•y t√™n b·ªánh t·ª´ k·∫øt qu·∫£
      const diseaseName = scan.result.includes('g·ªâ s·∫Øt') ? 'G·ªâ s·∫Øt' :
                          scan.result.includes('phoma') ? 'Phoma' :
                          scan.result.includes('miner') ? 'Miner' :
                          scan.result.includes('cercospora') ? 'Cerco' : 'Kh√°c';
      acc[diseaseName] = (acc[diseaseName] || 0) + 1;
    }
    return acc;
  }, {});

  return {
    totalScans,
    healthyTrees,
    diseasedTrees,
    notCoffeeTrees, // Th√™m tr∆∞·ªùng m·ªõi v√†o k·∫øt qu·∫£ tr·∫£ v·ªÅ
    diseases
  };
};